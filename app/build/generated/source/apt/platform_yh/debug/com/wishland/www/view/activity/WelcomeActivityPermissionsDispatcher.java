// This file was generated by PermissionsDispatcher. Do not modify!
package com.wishland.www.view.activity;

import android.support.v4.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class WelcomeActivityPermissionsDispatcher {
  private static final int REQUEST_DOCALL = 0;

  private static final String[] PERMISSION_DOCALL = new String[] {"android.permission.READ_EXTERNAL_STORAGE","android.permission.WRITE_EXTERNAL_STORAGE"};

  private WelcomeActivityPermissionsDispatcher() {
  }

  static void doCallWithCheck(WelcomeActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_DOCALL)) {
      target.doCall();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_DOCALL)) {
        target.showDialog(new DoCallPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_DOCALL, REQUEST_DOCALL);
      }
    }
  }

  static void onRequestPermissionsResult(WelcomeActivity target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_DOCALL:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.doCall();
      } else {
        target.refuse();
      }
      break;
      default:
      break;
    }
  }

  private static final class DoCallPermissionRequest implements PermissionRequest {
    private final WeakReference<WelcomeActivity> weakTarget;

    private DoCallPermissionRequest(WelcomeActivity target) {
      this.weakTarget = new WeakReference<WelcomeActivity>(target);
    }

    @Override
    public void proceed() {
      WelcomeActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_DOCALL, REQUEST_DOCALL);
    }

    @Override
    public void cancel() {
      WelcomeActivity target = weakTarget.get();
      if (target == null) return;
      target.refuse();
    }
  }
}
